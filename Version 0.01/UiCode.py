# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QFileDialog, QMessageBox, QDialog, QRadioButton, QButtonGroup, QWidget, QVBoxLayout, QGridLayout
import cv2

class AnotherWindow(QWidget):
    """
    This "window" is a QWidget. If it has no parent, it
    will appear as a free-floating window as we want.
    """
    def __init__(self):
        QWidget.__init__(self)
        layout = QGridLayout()
        self.setLayout(layout)

        radiobutton = QRadioButton("X-axis")
        # radiobutton.setChecked(True)
        radiobutton.toggled.connect(self.onClicked)
        layout.addWidget(radiobutton, 0, 0)

        radiobutton1 = QRadioButton("Y-axis")
        radiobutton1.toggled.connect(self.onClicked)
        layout.addWidget(radiobutton1, 0, 1)

        button_group = QButtonGroup(layout)
        button_group.addButton(radiobutton)
        button_group.addButton(radiobutton1)

    def onClicked(self):
        radioButton = self.sender()
        if radioButton.isChecked():
                Ui_MainWindow.setupUi.flipPopped[1] = 0
        if radioButton.isChecked():
                Ui_MainWindow.setupUi.flipPopped[1] = 1


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        #Reading necessary files
        buttonStyle = open("Styling/buttonStyling.txt", "r") 

        #Declaring some of my own variables
        self.currentImage = ""
        self.flipPopped = [False, 0]   # First is to determine if the popup has been opened already, second is to flip on axis x (0), or y (1)

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(0, 0, 161, 431))
        self.groupBox.setStyleSheet("QGroupBox {\n"
"    background-color: grey;\n"
"\n"
"    border: 2px solid black;\n"
"    border-radius: 10px\n"
"}")
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.widget = QtWidgets.QWidget(self.groupBox)
        self.widget.setGeometry(QtCore.QRect(20, 40, 120, 348))
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(25)
        self.verticalLayout.setObjectName("verticalLayout")
        self.flipButton = QtWidgets.QPushButton(self.widget)
        self.flipButton.setStyleSheet(str(buttonStyle)) #Opens the styling string generated by Pyqt5, I just wrote it to a file to make the code more compact
        self.flipButton.setObjectName("flipButton")
        self.verticalLayout.addWidget(self.flipButton)
        self.randomZoomButton = QtWidgets.QPushButton(self.widget)
        self.randomZoomButton.setStyleSheet(str(buttonStyle))
        self.randomZoomButton.setObjectName("randomZoomButton")
        self.verticalLayout.addWidget(self.randomZoomButton)
        self.rgbChangeButton = QtWidgets.QPushButton(self.widget)
        self.rgbChangeButton.setStyleSheet(str(buttonStyle))
        self.rgbChangeButton.setObjectName("rgbChangeButton")
        self.verticalLayout.addWidget(self.rgbChangeButton)
        self.pushButton_5 = QtWidgets.QPushButton(self.widget)
        self.pushButton_5.setStyleSheet(str(buttonStyle)) 
        self.pushButton_5.setObjectName("pushButton_5")
        self.verticalLayout.addWidget(self.pushButton_5)
        self.pushButton_6 = QtWidgets.QPushButton(self.widget)
        self.pushButton_6.setStyleSheet(str(buttonStyle)) 
        self.pushButton_6.setObjectName("pushButton_6")
        self.verticalLayout.addWidget(self.pushButton_6)
        self.pushButton = QtWidgets.QPushButton(self.widget)
        self.pushButton.setSizeIncrement(QtCore.QSize(0, 0))
        self.pushButton.setStyleSheet(str(buttonStyle))
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(0, 440, 791, 111))
        self.groupBox_2.setStyleSheet("QGroupBox {\n"      #This is an example of how pyqt automatically keeps track of its styling.
"    background-color: grey;\n"
"\n"
"    border: 2px solid black;\n"
"}")
        self.groupBox_2.setTitle("")
        self.groupBox_2.setObjectName("groupBox_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(180, 10, 591, 411))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap(self.currentImage)) # It seems like this only runs once at start up? 
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionImport_File = QtWidgets.QAction(MainWindow)
        self.actionImport_File.setObjectName("actionImport_File")
        self.actionSave_Image = QtWidgets.QAction(MainWindow)
        self.actionSave_Image.setObjectName("actionSave_Image")
        self.menuFile.addAction(self.actionImport_File)
        self.menuFile.addAction(self.actionSave_Image)
        self.menubar.addAction(self.menuFile.menuAction())

        self.actionImport_File.triggered.connect(self.importImage)
        self.flipButton.clicked.connect(self.flipImage)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    
    #Button Functions

    def importImage(self):
        file_name, _ = QFileDialog.getOpenFileName()  #This will prompt the user with a file navigation box
        self.currentImage = str(file_name)
        self.label.setPixmap(QtGui.QPixmap(self.currentImage)) #I included this since the "setPixmap" does not run automatically for some reason, but triggered does?

    def flipImage(self):
        #I want to be able to show a pop up that asks what axis you want to flip it on, x or y.
        self.show_new_window()


        img = cv2.imread(self.currentImage)
        img = cv2.flip(img, 0) 
        cv2.imwrite(self.currentImage, img) #This DESTRUCTIVELY OVERWRITES the image data.
        self.label.setPixmap(QtGui.QPixmap(self.currentImage))

    def show_new_window(self):
        if self.flipPopped[0] == False:
             self.w = AnotherWindow()
             self.flipPopped[0] = True
        self.w.show()



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.flipButton.setText(_translate("MainWindow", "Flip"))
        self.randomZoomButton.setText(_translate("MainWindow", "Random \n"
" Zoom"))
        self.rgbChangeButton.setText(_translate("MainWindow", "RGB Change"))
        self.pushButton_5.setText(_translate("MainWindow", "PushButton"))
        self.pushButton_6.setText(_translate("MainWindow", "PushButton"))
        self.pushButton.setText(_translate("MainWindow", "PushButton"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.actionImport_File.setText(_translate("MainWindow", "Import File"))
        self.actionSave_Image.setText(_translate("MainWindow", "Save Image"))





if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
